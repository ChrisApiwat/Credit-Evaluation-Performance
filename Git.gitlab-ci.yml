stages:
  - setup
  - fetch_data
  - process_data
  - backup

variables:
  DB_USER: "Apiwat"
  DB_PASSWORD: "Apiw@2024"
  JDBC_JAR: "tibero6-jdbc.jar"
  PYTHON_VERSION: "3.11"
  TIBERO_JDBC_URL: "jdbc:tibero:thin:@192.169.10.51:18629:DSTFCC"
  TIBERO_DB_USER: "Apiwat"
  TIBERO_DB_PASSWORD: "Apiw@2024"

cache:
  paths:
    - .venv/

before_script:
  - echo "?? Setting up environment..."
  - apt-get update && apt-get install -y openjdk-11-jdk python3-venv
  - python3 -m venv .venv
  - source .venv/bin/activate
  - pip install --upgrade pip
  - pip install pandas openpyxl jaydebeapi

setup_environment:
  stage: setup
  tags:
    - schedule-runner
  script:
    - echo "?? Checking for JDBC driver..."
    - if [ ! -f "tibero6-jdbc.jar" ]; then wget "http://example.com/tibero6-jdbc.jar" -O tibero6-jdbc.jar; fi
  artifacts:
    paths:
      - tibero6-jdbc.jar

fetch_data:
  stage: fetch_data
  tags:
    - schedule-runner
  script:
    - source .venv/bin/activate
    - python fetch_data.py
    - ls -lh Evaluation_*.xlsx || echo "? No data found!"
  artifacts:
    paths:
      - Evaluation_*.xlsx
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

process_data:
  stage: process_data
  tags:
    - schedule-runner
  script:
    - echo "?? Running query_data.py..."
    - source .venv/bin/activate
    - python query_data.py || echo "? Error occurred in query_data.py"
    - ls -lh *.xlsx || echo "? No processed data found!"
  dependencies:
    - fetch_data
  artifacts:
    paths:
      - "*.xlsx"
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

backup_data:
  stage: backup
  tags:
    - schedule-runner
  script:
    - echo "?? Moving files to backup..."
    - mkdir -p backup
    - source .venv/bin/activate
    - |
      for file in Evaluation_*.xlsx; do
        FILE_TIME=$(echo "$file" | grep -oE '[0-9]{2}-[0-9]{2}-[0-9]{4}_[0-9]{2}-[0-9]{2}-[0-9]{2}')
        FILE_HOUR_MIN=$(echo "$FILE_TIME" | cut -d'_' -f2 | cut -d'-' -f1,2)

        if [ "$FILE_HOUR_MIN" == "20-50" ]; then
          echo "?? Keeping $file in backup..."
          mv "$file" backup/
        else
          echo "? Deleting old file: $file"
          rm -f "$file"
        fi
      done
  dependencies:
    - fetch_data
    - process_data
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
  - if: '$CI_COMMIT_BRANCH == "main"'

